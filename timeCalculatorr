def add_time(start_time, duration, starting_day=None):
    # Parse the start_time to extract hours, minutes, and AM/PM indicator
    start_time, am_pm = start_time.split()
    start_hours, start_minutes = map(int, start_time.split(':'))

    # Parse the duration to extract hours and minutes
    duration_hours, duration_minutes = map(int, duration.split(':'))

    # Calculate the total minutes
    total_minutes = start_hours * 60 + start_minutes + duration_hours * 60 + duration_minutes

    # Calculate the number of days later (if any)
    days_later = total_minutes // (24 * 60)

    # Calculate the new time
    new_hours = (total_minutes // 60) % 12
    new_minutes = total_minutes % 60

    # Determine the new AM/PM indicator
    if total_minutes // (12 * 60) % 2 == 1:
        am_pm = "PM" if am_pm == "AM" else "AM"

    # Convert the new_hours to 12 if it's 0
    new_hours = 12 if new_hours == 0 else new_hours

    # Format the new time
    new_time = f"{new_hours}:{new_minutes:02d} {am_pm}"

    # Add the starting day of the week (if provided)
    if starting_day:
        starting_day = starting_day.lower().capitalize()
        day_index = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"].index(starting_day)
        new_day_index = (day_index + days_later) % 7
        new_day = ", " + ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"][new_day_index]
        new_time += new_day

    # Add days later if applicable
    if days_later == 1:
        new_time += " (next day)"
    elif days_later > 1:
        new_time += f" ({days_later} days later)"

    return new_time

# Example usage:
print(add_time("3:00 PM", "3:10"))
print(add_time("11:30 AM", "2:32", "Monday"))
print(add_time("11:43 AM", "00:20"))
print(add_time("10:10 PM", "3:30"))
print(add_time("11:43 PM", "24:20", "Tuesday"))
print(add_time("6:30 PM", "205:12"))
